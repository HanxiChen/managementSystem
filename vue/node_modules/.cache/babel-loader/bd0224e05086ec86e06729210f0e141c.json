{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Vue from 'vue';\nimport VueRouter from 'vue-router';\nimport store from '../store';\nVue.use(VueRouter);\nconst routes = [{\n  path: '/login',\n  name: 'Login',\n  component: () => import('../views/Login.vue')\n}, {\n  path: '/register',\n  name: 'Register',\n  component: () => import('../views/Register.vue')\n}, {\n  path: '*',\n  name: '404',\n  component: () => import('../views/404.vue')\n}];\nconst router = new VueRouter({\n  mode: 'history',\n  base: process.env.BASE_URL,\n  routes\n});\nexport const setRoutes = () => {\n  const storeMenus = localStorage.getItem(\"menus\");\n\n  if (storeMenus) {\n    // 拼装动态路由\n    const manageRoute = {\n      path: '/',\n      name: 'Manage',\n      component: () => import('../views/Manage'),\n      redirect: \"/home\",\n      children: []\n    };\n    const menus = JSON.parse(storeMenus);\n    menus.forEach(item => {\n      if (item.path) {\n        // 当且仅当path不为空的时候才去设置路由\n        let itemMenu = {\n          path: item.path.replace(\"/\", \"\"),\n          name: item.name,\n          component: () => import('../views/' + item.pagePath + '.vue')\n        };\n        manageRoute.children.push(itemMenu);\n      } else if (item.children.length) {\n        item.children.forEach(item => {\n          if (item.path) {\n            let itemMenu = {\n              path: item.path.replace(\"/\", \"\"),\n              name: item.name,\n              component: () => import('../views/' + item.pagePath + '.vue')\n            };\n            manageRoute.children.push(itemMenu);\n          }\n        });\n      }\n    }); // 获取当前的路由对象名称数组\n\n    const currentRouteNames = router.getRoutes().map(v => v.name);\n\n    if (!currentRouteNames.includes('Manage')) {\n      // 动态添加到现在的路由对象中\n      router.addRoute(manageRoute);\n    }\n  }\n}; // 重置就set一次路由\n\nsetRoutes(); //路由守卫\n\nrouter.beforeEach((to, from, next) => {\n  localStorage.setItem(\"currentPathName\", to.name); //设置当前的路由名称,为了在Header组件中使用\n\n  store.commit(\"setPath\"); //触发shore的数据更新\n\n  next(); //放行路由\n});\nexport default router;","map":{"version":3,"names":["Vue","VueRouter","store","use","routes","path","name","component","router","mode","base","process","env","BASE_URL","setRoutes","storeMenus","localStorage","getItem","manageRoute","redirect","children","menus","JSON","parse","forEach","item","itemMenu","replace","pagePath","push","length","currentRouteNames","getRoutes","map","v","includes","addRoute","beforeEach","to","from","next","setItem","commit"],"sources":["E:/Project/SpringBoot/managementSystem/springboot/vue/src/router/index.js"],"sourcesContent":["import Vue from 'vue'\nimport VueRouter from 'vue-router'\nimport store from '../store'\n\nVue.use(VueRouter)\n\nconst routes = [\n  {\n    path: '/login',\n    name: 'Login',\n    component: () => import('../views/Login.vue')\n  },\n  {\n    path: '/register',\n    name: 'Register',\n    component: () => import('../views/Register.vue')\n  },\n  {\n    path: '*',\n    name: '404',\n    component: () => import('../views/404.vue')\n  }\n]\n\nconst router = new VueRouter({\n  mode: 'history',\n  base: process.env.BASE_URL,\n  routes\n})\n\nexport const setRoutes = () => {\n  const storeMenus = localStorage.getItem(\"menus\");\n  if (storeMenus) {\n    // 拼装动态路由\n    const manageRoute = { path: '/', name: 'Manage', component: () => import('../views/Manage'), redirect: \"/home\", children: []}\n    const menus = JSON.parse(storeMenus)\n    menus.forEach(item => {\n      if (item.path) {    // 当且仅当path不为空的时候才去设置路由\n        let itemMenu = {path: item.path.replace(\"/\", \"\"), name: item.name, component: () => import('../views/' + item.pagePath + '.vue')}\n        manageRoute.children.push(itemMenu)\n      } else if (item.children.length) {\n        item.children.forEach(item => {\n          if (item.path) {\n            let itemMenu = {path: item.path.replace(\"/\", \"\"), name: item.name, component: () => import('../views/' + item.pagePath + '.vue')}\n            manageRoute.children.push(itemMenu)\n          }\n        })\n      }\n    })\n\n    // 获取当前的路由对象名称数组\n    const currentRouteNames = router.getRoutes().map(v => v.name)\n    if (!currentRouteNames.includes('Manage')) {\n      // 动态添加到现在的路由对象中\n      router.addRoute(manageRoute)\n    }\n  }\n}\n\n// 重置就set一次路由\nsetRoutes()\n\n//路由守卫\nrouter.beforeEach((to, from, next) => {\n  localStorage.setItem(\"currentPathName\", to.name)  //设置当前的路由名称,为了在Header组件中使用\n  store.commit(\"setPath\") //触发shore的数据更新\n  next()  //放行路由\n})\nexport default router\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}